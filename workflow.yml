# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: cenxg-montreal-app

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted
    
    env:
      name: my-artifact
      artifact: app.jar
    
    steps:
    - name: Checkout repository 
      uses: actions/checkout@v3
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Push artifact to s3
      run: aws s3 cp ${{ github.workspace }}/target/${{ env.artifact }} s3://montreal4ever
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.name }}
        path: ${{ github.workspace }}/target/app.jar
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gsd-datalake-qpcr-edc-table-view-refresh
        IMAGE_TAG: demo
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: configure artifactory
      uses: jfrog/setup-jfrog-cli@v2
      env:
        JF_ARTIFACTORY_SERVER: ${{ secrets.JF_ENV_TFSJF }}
        
    - name: push to jfrog
      run: |
        # Upload artefact to CENXG-Jfrog-repo
        jfrog rt u target/app.jar cenxg-maven-dev-local/thermo/montreal/${{github.run_number}}/app.jar --recursive=false --build-name cenxg-montreal-app
        # Add env vars
        jfrog rt bce
        # Add git info
        jf rt bag
        # Publish Build info
        jfrog rt bp cenxg-montreal-app
